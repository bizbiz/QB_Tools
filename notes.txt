# Module Tricount Helper

Ce module permet de gérer vos dépenses personnelles et professionnelles, et de les organiser pour les partager via Tricount ou les soumettre comme notes de frais via N2F.

## Fonctionnalités principales

- **Importation de dépenses** depuis les relevés Société Générale
- **Catégorisation automatique et manuelle** des dépenses
- **Marquage des dépenses** à inclure dans Tricount ou comme dépenses professionnelles
- **Exportation CSV** compatible avec Tricount et N2F

## Structure du module

```
app/services/tricount/
├── __init__.py                # Exporte les classes principales
├── bank_statement_parser.py   # Analyseur de relevés bancaires
└── README.md                  # Ce fichier
```

## Installation et initialisation

### Initialisation des catégories par défaut

Pour initialiser les catégories par défaut, utilisez la commande Flask suivante:

```bash
docker exec qb_tools_app flask init-tricount-categories
```

Cette commande crée les catégories par défaut dans la base de données.

## Utilisation

1. **Accédez au module Tricount Helper** depuis la page d'accueil de QB Tools
2. **Importez vos dépenses** en copiant-collant le texte de votre relevé bancaire Société Générale
3. **Catégorisez vos dépenses** et marquez celles à inclure dans Tricount ou comme professionnelles
4. **Exportez les données** au format CSV pour Tricount ou N2F

## Paramètres d'exportation

### Pour Tricount
- **Participants**: Liste des participants séparés par des virgules (ex: "John, Jane, Bob")
- **Payeur par défaut**: Nom du participant qui a payé les dépenses par défaut

### Pour N2F
- **Nom de l'employé**: Votre nom complet
- **ID employé**: Votre identifiant d'employé (optionnel)
- **Projet**: Nom du projet associé aux dépenses (optionnel)

## Développement

Pour étendre ce module, vous pouvez:


. Vérifier que si on créé une auto rule qu'aucune dépense ne soit impactée par cette auto rule + une des autres déjà présente sinon on demande de préciser une des deux auto rule
. modifier l'edition de l'auto categorisation pour afficher les résultats comme pour la création (fusionner les deux ? permet de passer des préselection a la regle d'ajout ?)
. Les regles d'auto catégorisation n'appliquent pas les flags alors qu'ils le devraient
. On peut rajouter un montant minimum ou maximum ou les deux pour les regles d'auto catégorisation
. Il faut ajouter une page pour valider les dépenses qui ont été catch par des regles d'auto catégorisation
. Il faut ajouter un 3 eme bloc qui permet de gérer l'auto catégorisation
. Il faut pouvoir lancer l'auto catégorisation avec toutes les regles via un bouton sur la page d'accueil avec un témoin de chargement
. Il faut une page qui affiche des stats, avec une fonctionnalité qui permet de choisir 3 des stats qu'on met sur la page d'accueil
. Il faut trouver un moyen de gérer les renvois depuis la carte corporate
. Lorsqu'on selecte auto categorization si on a djéà choisi des flag ou des catégories il faut le pré remplir dans la page de paramétrage de l'auto catégorization
. Dans auto categorize les catégories ne sont pas correctement rafraichi en fonction du flag
. Il faut trier les listes de catégories par ordre alphabétique
. Ici /tricount/auto-rules il faut ajouter les flags à la place des occurences
. Ici le lien d'edition ne fonctionne pas : /tricount/expenses

. Ajouter de nouveaux parsers de relevés bancaires dans le dossier `app/services/tricount/`
. Personnaliser les formats d'exportation dans `app/routes/tricount.py`


De plus on essaye d'éviter que l'utilisateur puisse créer deux regles qui se superposent en affichant dans la liste "**Dépenses similaires trouvées"** mais actuellement si j'essaye de faire deux regles qui catch la même chose, lorsque je fais la deuxieme je n'ai aucun résultat, il faut afficher les dépenses qui seraient catch mais au lieu d'une croix verte valide, il faut mettre une croix rouge pour signifier qu'il y a un probleme

En cas de conflit de regle, il faut proposer d'editer l'autre regle ou de continuer a modifier cette regle, mais on ne peut pas laisser l'utilisatuer créer une regle qui se superpose