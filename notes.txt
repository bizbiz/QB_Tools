# Module Tricount Helper

Ce module permet de gérer vos dépenses personnelles et professionnelles, et de les organiser pour les partager via Tricount ou les soumettre comme notes de frais via N2F.

## Fonctionnalités principales

- **Importation de dépenses** depuis les relevés Société Générale
- **Catégorisation automatique et manuelle** des dépenses
- **Marquage des dépenses** à inclure dans Tricount ou comme dépenses professionnelles
- **Exportation CSV** compatible avec Tricount et N2F

## Structure du module

```
app/services/tricount/
├── __init__.py                # Exporte les classes principales
├── bank_statement_parser.py   # Analyseur de relevés bancaires
└── README.md                  # Ce fichier
```

## Installation et initialisation

### Initialisation des catégories par défaut

Pour initialiser les catégories par défaut, utilisez la commande Flask suivante:

```bash
docker exec qb_tools_app flask init-tricount-categories
```

Cette commande crée les catégories par défaut dans la base de données.

## Utilisation

1. **Accédez au module Tricount Helper** depuis la page d'accueil de QB Tools
2. **Importez vos dépenses** en copiant-collant le texte de votre relevé bancaire Société Générale
3. **Catégorisez vos dépenses** et marquez celles à inclure dans Tricount ou comme professionnelles
4. **Exportez les données** au format CSV pour Tricount ou N2F

## Paramètres d'exportation

### Pour Tricount
- **Participants**: Liste des participants séparés par des virgules (ex: "John, Jane, Bob")
- **Payeur par défaut**: Nom du participant qui a payé les dépenses par défaut

### Pour N2F
- **Nom de l'employé**: Votre nom complet
- **ID employé**: Votre identifiant d'employé (optionnel)
- **Projet**: Nom du projet associé aux dépenses (optionnel)

## Développement

Pour étendre ce module, vous pouvez:

. Il faut ajouter un 3 eme bloc qui permet de gérer l'auto catégorisation
. Il faut pouvoir lancer l'auto catégorisation avec toutes les regles via un bouton sur la page d'accueil avec un témoin de chargement
. Il faut une page qui affiche des stats, avec une fonctionnalité qui permet de choisir 3 des stats qu'on met sur la page d'accueil
. Il faut trouver un moyen de gérer les renvois depuis la carte corporate
. Lorsqu'on selecte auto categorization si on a djéà choisi des flag ou des catégories il faut le pré remplir dans la page de paramétrage de l'auto catégorization
. Il faut trier les listes de catégories par ordre alphabétique
. Ici /tricount/auto-rules il faut ajouter les flags à la place des occurences
. Ici le lien d'edition ne fonctionne pas : /tricount/expenses

. Ajouter de nouveaux parsers de relevés bancaires dans le dossier `app/services/tricount/`
. Personnaliser les formats d'exportation dans `app/routes/tricount.py`
. Pour dépenses similaires trouvées :

Si vous souhaitez pousser cette amélioration plus loin à l'avenir, vous pourriez :

Ajouter une infobulle (tooltip) qui explique cette différence
Proposer une option pour choisir sur quel champ filtrer (original ou renommé)
Permettre la prévisualisation de l'effet du renommage sur les dépenses détectées


. Pour le systeme de listes de catégories unifié via macro et js

Suggestions d'amélioration pour le système de catégorisation
Voici quelques idées pour améliorer votre système de sélection et filtrage des catégories en fonction du type de dépense :
Améliorations UX

Indicateurs visuels dans le dropdown - Ajouter une petite icône colorée à côté de chaque catégorie pour indiquer à quels types elle est associée, facilitant la compréhension des relations
Notification subtile - Lorsque le changement de type réinitialise la catégorie, afficher un petit message temporaire (toast) expliquant pourquoi la sélection a été réinitialisée
Suggestions intelligentes - Au lieu de simplement revenir à "Choisir une catégorie", proposer automatiquement la catégorie la plus utilisée avec ce type de dépense
Recherche rapide - Ajouter un champ de recherche au-dessus du dropdown pour filtrer rapidement les catégories par nom

Optimisations techniques

Mise en cache des résultats de filtrage - Mémoriser les ensembles d'options déjà calculés pour éviter de refaire le même filtrage plusieurs fois
Pré-indexation des relations - Créer des index optimisés des relations catégorie-flag côté serveur avant de les envoyer au client
Utilisation de structures Set/Map - Remplacer les tableaux par des structures plus efficaces pour accélérer les recherches et comparaisons

Nouvelles fonctionnalités

Création à la volée - Permettre de créer une nouvelle catégorie directement depuis le dropdown si l'utilisateur ne trouve pas celle qu'il cherche
Historique personnalisé - Mémoriser et mettre en avant les dernières catégories utilisées par l'utilisateur pour chaque type
Auto-catégorisation intelligente - Analyser la description/le marchand pour suggérer automatiquement la catégorie la plus probable
Favoris - Permettre à l'utilisateur d'épingler ses catégories préférées en haut de la liste

Améliorations d'organisation

Interface d'administration visuelle - Créer une interface drag & drop pour gérer facilement les associations entre catégories et types
API dédiée pour les données de catégories - Charger ces données via une API séparée plutôt que de tout injecter dans le HTML
Système de statistiques - Ajouter un tableau de bord montrant quelles catégories sont les plus utilisées, aidant à optimiser l'organisation

Accessibilité et mobile

Navigation au clavier améliorée - S'assurer que tout le processus de sélection est entièrement utilisable sans souris
Version mobile optimisée - Adapter l'interface pour les petits écrans avec peut-être un mode de sélection différent (modal ou fullscreen)
Filtres tactiles - Sur mobile, ajouter des boutons de filtre rapide pour les catégories les plus courantes

Ces améliorations pourraient être implémentées progressivement, en commençant par celles qui apportent le plus de valeur à vos utilisateurs avec un effort minimal.


. Ajouter la possibilité au client d'ajouter des icones et charger la liste d'icone modulable là où on en a besoin

. rename remplace name et notes remplace description

. Il faut vérifier que seulement si flag & catégorie sont remplacé on fais disparaitre de à catégoriser

. Gérer le cas où deux regles se superposent mais pour des champs différents (types, rename, catégorie) alors ok

. Afficher une page de récap où on valide les remboursement d'un type de dépense (rien, déclaré, remboursé) ? Il faut ajouter un champ dans expense pour l'état et un champ dans les flags pour is_verifiable

. Autres manières d'importer (N26)

. Importer les N2F pour les croiser avec remboursable

. Importer le tricount a partir de screen ?



Possibilité d'extraire plus d'info de N26 :
1. Informations sur les transactions internationales
- Original Amount
- Original Currency  
- Exchange Rate
Ces données sont particulièrement utiles pour :

Suivre les dépenses à l'étranger
Calculer combien vous avez réellement payé en devise originale
Analyser l'efficacité des taux de change appliqués

2. Données bancaires supplémentaires
- Value Date (différente de la Booking Date)
- Partner IBAN
- Account Name
Ces informations pourraient servir à :

Datation plus précise : La date de valeur (quand l'argent est effectivement débité/crédité) vs date de transaction
Identification unique des bénéficiaires : L'IBAN permet d'identifier un destinataire de manière fiable, même si son nom change légèrement
Gestion multi-comptes : Si l'utilisateur a plusieurs comptes N26

Améliorations possibles

Règles d'auto-catégorisation basées sur l'IBAN

Plus précis que le nom du marchand qui peut varier
Idéal pour les virements récurrents (loyer, salaire, etc.)


Tableau de bord des dépenses internationales

Visualiser les dépenses par pays/devise
Analyser si vous avez obtenu de bons taux de change


Champs supplémentaires dans l'interface

Afficher l'IBAN pour les virements
Afficher le montant original + devise pour les transactions étrangères


Amélioration de la détection des doublons

Utiliser l'IBAN comme critère supplémentaire pour identifier les transactions similaires